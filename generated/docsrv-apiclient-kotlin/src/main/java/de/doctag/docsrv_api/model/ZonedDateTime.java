/*
 * DocServer
 * More Info available on https://www.doctag.de
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.doctag.docsrv_api.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import de.doctag.docsrv_api.model.ZoneOffset;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ZonedDateTime
 */
@JsonPropertyOrder({
  ZonedDateTime.JSON_PROPERTY_DATE_TIME,
  ZonedDateTime.JSON_PROPERTY_OFFSET,
  ZonedDateTime.JSON_PROPERTY_ZONE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ZonedDateTime {
  public static final String JSON_PROPERTY_DATE_TIME = "dateTime";
  private OffsetDateTime dateTime;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private ZoneOffset offset;

  public static final String JSON_PROPERTY_ZONE = "zone";
  private JsonNullable<Object> zone = JsonNullable.<Object>of(null);


  public ZonedDateTime dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Get dateTime
   * @return dateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDateTime() {
    return dateTime;
  }


  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public ZonedDateTime offset(ZoneOffset offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ZoneOffset getOffset() {
    return offset;
  }


  public void setOffset(ZoneOffset offset) {
    this.offset = offset;
  }


  public ZonedDateTime zone(Object zone) {
    this.zone = JsonNullable.<Object>of(zone);
    return this;
  }

   /**
   * Get zone
   * @return zone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public Object getZone() {
        return zone.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getZone_JsonNullable() {
    return zone;
  }
  
  @JsonProperty(JSON_PROPERTY_ZONE)
  public void setZone_JsonNullable(JsonNullable<Object> zone) {
    this.zone = zone;
  }

  public void setZone(Object zone) {
    this.zone = JsonNullable.<Object>of(zone);
  }


  /**
   * Return true if this ZonedDateTime object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZonedDateTime zonedDateTime = (ZonedDateTime) o;
    return Objects.equals(this.dateTime, zonedDateTime.dateTime) &&
        Objects.equals(this.offset, zonedDateTime.offset) &&
        Objects.equals(this.zone, zonedDateTime.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateTime, offset, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZonedDateTime {\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

