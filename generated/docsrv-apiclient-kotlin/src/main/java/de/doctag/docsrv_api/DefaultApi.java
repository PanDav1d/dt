/*
 * DocServer
 * More Info available on https://www.doctag.de
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package de.doctag.docsrv_api;

import de.doctag.docsrv_api.invoker.ApiClient;
import de.doctag.docsrv_api.invoker.ApiException;
import de.doctag.docsrv_api.invoker.ApiResponse;
import de.doctag.docsrv_api.invoker.Pair;

import de.doctag.docsrv_api.model.AuthInfoResponse;
import de.doctag.docsrv_api.model.DiscoveryResponse;
import de.doctag.docsrv_api.model.Document;
import de.doctag.docsrv_api.model.EmbeddedDocument;
import de.doctag.docsrv_api.model.EmbeddedSignature;
import de.doctag.docsrv_api.model.HealthCheckResponse;
import de.doctag.docsrv_api.model.PreparedSignature;
import de.doctag.docsrv_api.model.PublicKeyVerification;
import de.doctag.docsrv_api.model.SignatureInputs;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Add signature to document
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @param embeddedSignature  (optional)
   * @return Document
   * @throws ApiException if fails to make API call
   */
  public Document addSignatureToDoctagDocument(String documentId, String hostname, EmbeddedSignature embeddedSignature) throws ApiException {
    ApiResponse<Document> localVarResponse = addSignatureToDoctagDocumentWithHttpInfo(documentId, hostname, embeddedSignature);
    return localVarResponse.getData();
  }

  /**
   * Add signature to document
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @param embeddedSignature  (optional)
   * @return ApiResponse&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Document> addSignatureToDoctagDocumentWithHttpInfo(String documentId, String hostname, EmbeddedSignature embeddedSignature) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addSignatureToDoctagDocumentRequestBuilder(documentId, hostname, embeddedSignature);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "addSignatureToDoctagDocument call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Document>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Document>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addSignatureToDoctagDocumentRequestBuilder(String documentId, String hostname, EmbeddedSignature embeddedSignature) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling addSignatureToDoctagDocument");
    }
    // verify the required parameter 'hostname' is set
    if (hostname == null) {
      throw new ApiException(400, "Missing the required parameter 'hostname' when calling addSignatureToDoctagDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/d/{documentId}/{hostname}"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()))
        .replace("{hostname}", ApiClient.urlEncode(hostname.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(embeddedSignature);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Health Check
   * 
   * @return HealthCheckResponse
   * @throws ApiException if fails to make API call
   */
  public HealthCheckResponse checkHealth() throws ApiException {
    ApiResponse<HealthCheckResponse> localVarResponse = checkHealthWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Perform Health Check
   * 
   * @return ApiResponse&lt;HealthCheckResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<HealthCheckResponse> checkHealthWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = checkHealthRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "checkHealth call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<HealthCheckResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<HealthCheckResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder checkHealthRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/health";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Instance discovery
   * 
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse discoverInstance() throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = discoverInstanceWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Perform Instance discovery
   * 
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> discoverInstanceWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = discoverInstanceRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "discoverInstance call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder discoverInstanceRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/discovery";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Download document
   * 
   * @param documentId documentId (required)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse downloadDocument(String documentId) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = downloadDocumentWithHttpInfo(documentId);
    return localVarResponse.getData();
  }

  /**
   * Download document
   * 
   * @param documentId documentId (required)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> downloadDocumentWithHttpInfo(String documentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadDocumentRequestBuilder(documentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "downloadDocument call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadDocumentRequestBuilder(String documentId) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling downloadDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/d/{documentId}/download"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Instance discovery
   * 
   * @param fileId fileId (required)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse downloadFile(String fileId) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = downloadFileWithHttpInfo(fileId);
    return localVarResponse.getData();
  }

  /**
   * Perform Instance discovery
   * 
   * @param fileId fileId (required)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> downloadFileWithHttpInfo(String fileId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadFileRequestBuilder(fileId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "downloadFile call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadFileRequestBuilder(String fileId) throws ApiException {
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling downloadFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/f/{fileId}/download"
        .replace("{fileId}", ApiClient.urlEncode(fileId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Download sign sheet
   * 
   * @param documentId documentId (required)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse downloadSignSheet(String documentId) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = downloadSignSheetWithHttpInfo(documentId);
    return localVarResponse.getData();
  }

  /**
   * Download sign sheet
   * 
   * @param documentId documentId (required)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> downloadSignSheetWithHttpInfo(String documentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = downloadSignSheetRequestBuilder(documentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "downloadSignSheet call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder downloadSignSheetRequestBuilder(String documentId) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling downloadSignSheet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/d/{documentId}/viewSignSheet"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check authentication
   * 
   * @return AuthInfoResponse
   * @throws ApiException if fails to make API call
   */
  public AuthInfoResponse fetchAuthInfo() throws ApiException {
    ApiResponse<AuthInfoResponse> localVarResponse = fetchAuthInfoWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Check authentication
   * 
   * @return ApiResponse&lt;AuthInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuthInfoResponse> fetchAuthInfoWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fetchAuthInfoRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "fetchAuthInfo call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<AuthInfoResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuthInfoResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fetchAuthInfoRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/app/auth_info";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Fetch doctag document
   * 
   * @param documentId documentId (required)
   * @return EmbeddedDocument
   * @throws ApiException if fails to make API call
   */
  public EmbeddedDocument fetchDoctagDocument(String documentId) throws ApiException {
    ApiResponse<EmbeddedDocument> localVarResponse = fetchDoctagDocumentWithHttpInfo(documentId);
    return localVarResponse.getData();
  }

  /**
   * Fetch doctag document
   * 
   * @param documentId documentId (required)
   * @return ApiResponse&lt;EmbeddedDocument&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EmbeddedDocument> fetchDoctagDocumentWithHttpInfo(String documentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fetchDoctagDocumentRequestBuilder(documentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "fetchDoctagDocument call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<EmbeddedDocument>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EmbeddedDocument>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fetchDoctagDocumentRequestBuilder(String documentId) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling fetchDoctagDocument");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/d/{documentId}"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check authentication
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @return PreparedSignature
   * @throws ApiException if fails to make API call
   */
  public PreparedSignature fetchWorkflowToSign(String documentId, String hostname) throws ApiException {
    ApiResponse<PreparedSignature> localVarResponse = fetchWorkflowToSignWithHttpInfo(documentId, hostname);
    return localVarResponse.getData();
  }

  /**
   * Check authentication
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @return ApiResponse&lt;PreparedSignature&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<PreparedSignature> fetchWorkflowToSignWithHttpInfo(String documentId, String hostname) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = fetchWorkflowToSignRequestBuilder(documentId, hostname);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "fetchWorkflowToSign call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<PreparedSignature>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PreparedSignature>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder fetchWorkflowToSignRequestBuilder(String documentId, String hostname) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling fetchWorkflowToSign");
    }
    // verify the required parameter 'hostname' is set
    if (hostname == null) {
      throw new ApiException(400, "Missing the required parameter 'hostname' when calling fetchWorkflowToSign");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/app/signature/prepare/{documentId}/{hostname}"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()))
        .replace("{hostname}", ApiClient.urlEncode(hostname.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Set the verification of the private public key
   * 
   * @param publicKeyFingerprint publicKeyFingerprint (required)
   * @param seed seed (required)
   * @param publicKeyVerification  (optional)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse setVerificationOfKeyPair(String publicKeyFingerprint, String seed, PublicKeyVerification publicKeyVerification) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = setVerificationOfKeyPairWithHttpInfo(publicKeyFingerprint, seed, publicKeyVerification);
    return localVarResponse.getData();
  }

  /**
   * Set the verification of the private public key
   * 
   * @param publicKeyFingerprint publicKeyFingerprint (required)
   * @param seed seed (required)
   * @param publicKeyVerification  (optional)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> setVerificationOfKeyPairWithHttpInfo(String publicKeyFingerprint, String seed, PublicKeyVerification publicKeyVerification) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = setVerificationOfKeyPairRequestBuilder(publicKeyFingerprint, seed, publicKeyVerification);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "setVerificationOfKeyPair call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder setVerificationOfKeyPairRequestBuilder(String publicKeyFingerprint, String seed, PublicKeyVerification publicKeyVerification) throws ApiException {
    // verify the required parameter 'publicKeyFingerprint' is set
    if (publicKeyFingerprint == null) {
      throw new ApiException(400, "Missing the required parameter 'publicKeyFingerprint' when calling setVerificationOfKeyPair");
    }
    // verify the required parameter 'seed' is set
    if (seed == null) {
      throw new ApiException(400, "Missing the required parameter 'seed' when calling setVerificationOfKeyPair");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/k/{publicKeyFingerprint}/verify/{seed}"
        .replace("{publicKeyFingerprint}", ApiClient.urlEncode(publicKeyFingerprint.toString()))
        .replace("{seed}", ApiClient.urlEncode(seed.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(publicKeyVerification);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check authentication
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @param signatureInputs  (optional)
   * @return AuthInfoResponse
   * @throws ApiException if fails to make API call
   */
  public AuthInfoResponse uploadWorkflowResultAndTriggerSignature(String documentId, String hostname, SignatureInputs signatureInputs) throws ApiException {
    ApiResponse<AuthInfoResponse> localVarResponse = uploadWorkflowResultAndTriggerSignatureWithHttpInfo(documentId, hostname, signatureInputs);
    return localVarResponse.getData();
  }

  /**
   * Check authentication
   * 
   * @param documentId documentId (required)
   * @param hostname hostname (required)
   * @param signatureInputs  (optional)
   * @return ApiResponse&lt;AuthInfoResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<AuthInfoResponse> uploadWorkflowResultAndTriggerSignatureWithHttpInfo(String documentId, String hostname, SignatureInputs signatureInputs) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = uploadWorkflowResultAndTriggerSignatureRequestBuilder(documentId, hostname, signatureInputs);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "uploadWorkflowResultAndTriggerSignature call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<AuthInfoResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AuthInfoResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder uploadWorkflowResultAndTriggerSignatureRequestBuilder(String documentId, String hostname, SignatureInputs signatureInputs) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(400, "Missing the required parameter 'documentId' when calling uploadWorkflowResultAndTriggerSignature");
    }
    // verify the required parameter 'hostname' is set
    if (hostname == null) {
      throw new ApiException(400, "Missing the required parameter 'hostname' when calling uploadWorkflowResultAndTriggerSignature");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/app/signature/push/{documentId}/{hostname}"
        .replace("{documentId}", ApiClient.urlEncode(documentId.toString()))
        .replace("{hostname}", ApiClient.urlEncode(hostname.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(signatureInputs);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Check that this instance actually owns the given private key
   * 
   * @param publicKeyFingerprint publicKeyFingerprint (required)
   * @param seed seed (required)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse verifyInstanceHasPrivateKey(String publicKeyFingerprint, String seed) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = verifyInstanceHasPrivateKeyWithHttpInfo(publicKeyFingerprint, seed);
    return localVarResponse.getData();
  }

  /**
   * Check that this instance actually owns the given private key
   * 
   * @param publicKeyFingerprint publicKeyFingerprint (required)
   * @param seed seed (required)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> verifyInstanceHasPrivateKeyWithHttpInfo(String publicKeyFingerprint, String seed) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = verifyInstanceHasPrivateKeyRequestBuilder(publicKeyFingerprint, seed);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "verifyInstanceHasPrivateKey call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder verifyInstanceHasPrivateKeyRequestBuilder(String publicKeyFingerprint, String seed) throws ApiException {
    // verify the required parameter 'publicKeyFingerprint' is set
    if (publicKeyFingerprint == null) {
      throw new ApiException(400, "Missing the required parameter 'publicKeyFingerprint' when calling verifyInstanceHasPrivateKey");
    }
    // verify the required parameter 'seed' is set
    if (seed == null) {
      throw new ApiException(400, "Missing the required parameter 'seed' when calling verifyInstanceHasPrivateKey");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/k/{publicKeyFingerprint}/verify/{seed}"
        .replace("{publicKeyFingerprint}", ApiClient.urlEncode(publicKeyFingerprint.toString()))
        .replace("{seed}", ApiClient.urlEncode(seed.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Perform Instance discovery
   * 
   * @param fileId fileId (required)
   * @return DiscoveryResponse
   * @throws ApiException if fails to make API call
   */
  public DiscoveryResponse viewFile(String fileId) throws ApiException {
    ApiResponse<DiscoveryResponse> localVarResponse = viewFileWithHttpInfo(fileId);
    return localVarResponse.getData();
  }

  /**
   * Perform Instance discovery
   * 
   * @param fileId fileId (required)
   * @return ApiResponse&lt;DiscoveryResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DiscoveryResponse> viewFileWithHttpInfo(String fileId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = viewFileRequestBuilder(fileId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "viewFile call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DiscoveryResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DiscoveryResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder viewFileRequestBuilder(String fileId) throws ApiException {
    // verify the required parameter 'fileId' is set
    if (fileId == null) {
      throw new ApiException(400, "Missing the required parameter 'fileId' when calling viewFile");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/f/{fileId}/view"
        .replace("{fileId}", ApiClient.urlEncode(fileId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
