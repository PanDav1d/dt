/*
 * DocServer API
 * API of the Docserver
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: hallo@doctag.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.doctag.docsrv_api;

import de.doctag.docsrv_api.invoker.ApiException;
import de.doctag.docsrv_api.model.AuthInfoResponse;
import de.doctag.docsrv_api.model.DiscoveryResponse;
import de.doctag.docsrv_api.model.Document;
import de.doctag.docsrv_api.model.EmbeddedDocument;
import java.io.File;
import de.doctag.docsrv_api.model.HealthCheckResponse;
import de.doctag.docsrv_api.model.PublicKeyVerification;
import de.doctag.docsrv_api.model.PublicKeyVerificationResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSignatureToDoctagDocumentTest() throws ApiException {
        String documentId = null;
        String hostname = null;
        File body = null;
        Document response = 
        api.addSignatureToDoctagDocument(documentId, hostname, body);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkHealthTest() throws ApiException {
        HealthCheckResponse response = 
        api.checkHealth();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void discoverInstanceTest() throws ApiException {
        DiscoveryResponse response = 
        api.discoverInstance();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        String documentId = null;
        File response = 
        api.downloadDocument(documentId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException {
        String fileId = null;
        File response = 
        api.downloadFile(fileId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSignSheetTest() throws ApiException {
        String documentId = null;
        File response = 
        api.downloadSignSheet(documentId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchAuthInfoTest() throws ApiException {
        AuthInfoResponse response = 
        api.fetchAuthInfo();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchDoctagDocumentTest() throws ApiException {
        String documentId = null;
        EmbeddedDocument response = 
        api.fetchDoctagDocument(documentId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVerificationOfKeyPairTest() throws ApiException {
        String publicKeyFingerprint = null;
        PublicKeyVerification publicKeyVerification = null;
        Object response = 
        api.setVerificationOfKeyPair(publicKeyFingerprint, publicKeyVerification);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyInstanceHasPrivateKeyTest() throws ApiException {
        String publicKeyFingerprint = null;
        String seed = null;
        PublicKeyVerificationResult response = 
        api.verifyInstanceHasPrivateKey(publicKeyFingerprint, seed);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewFileTest() throws ApiException {
        String fileId = null;
        File response = 
        api.viewFile(fileId);
        
        // TODO: test validations
    }
    
}
