/*
 * DocServer
 * More Info available on https://www.doctag.de
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package de.doctag.docsrv_api;

import de.doctag.docsrv_api.invoker.ApiException;
import de.doctag.docsrv_api.model.AuthInfoResponse;
import de.doctag.docsrv_api.model.DiscoveryResponse;
import de.doctag.docsrv_api.model.Document;
import de.doctag.docsrv_api.model.EmbeddedDocument;
import de.doctag.docsrv_api.model.EmbeddedSignature;
import de.doctag.docsrv_api.model.HealthCheckResponse;
import de.doctag.docsrv_api.model.NotifyRequest;
import de.doctag.docsrv_api.model.PreparedSignature;
import de.doctag.docsrv_api.model.PublicKeyVerification;
import de.doctag.docsrv_api.model.SignatureInputs;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Add signature to document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSignatureToDoctagDocumentTest() throws ApiException {
        String documentId = null;
        String hostname = null;
        EmbeddedSignature embeddedSignature = null;
        Document response = 
        api.addSignatureToDoctagDocument(documentId, hostname, embeddedSignature);
        
        // TODO: test validations
    }
    
    /**
     * Perform Health Check
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkHealthTest() throws ApiException {
        HealthCheckResponse response = 
        api.checkHealth();
        
        // TODO: test validations
    }
    
    /**
     * Perform Instance discovery
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void discoverInstanceTest() throws ApiException {
        DiscoveryResponse response = 
        api.discoverInstance();
        
        // TODO: test validations
    }
    
    /**
     * Download document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        String documentId = null;
        DiscoveryResponse response = 
        api.downloadDocument(documentId);
        
        // TODO: test validations
    }
    
    /**
     * Perform Instance discovery
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws ApiException {
        String fileId = null;
        DiscoveryResponse response = 
        api.downloadFile(fileId);
        
        // TODO: test validations
    }
    
    /**
     * Download sign sheet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSignSheetTest() throws ApiException {
        String documentId = null;
        DiscoveryResponse response = 
        api.downloadSignSheet(documentId);
        
        // TODO: test validations
    }
    
    /**
     * Check authentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchAuthInfoTest() throws ApiException {
        AuthInfoResponse response = 
        api.fetchAuthInfo();
        
        // TODO: test validations
    }
    
    /**
     * Fetch doctag document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchDoctagDocumentTest() throws ApiException {
        String documentId = null;
        EmbeddedDocument response = 
        api.fetchDoctagDocument(documentId);
        
        // TODO: test validations
    }
    
    /**
     * Check authentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchWorkflowToSignTest() throws ApiException {
        String documentId = null;
        String hostname = null;
        PreparedSignature response = 
        api.fetchWorkflowToSign(documentId, hostname);
        
        // TODO: test validations
    }
    
    /**
     * Add signature to document
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyChangesOfDoctagDocumentTest() throws ApiException {
        NotifyRequest notifyRequest = null;
        Object response = 
        api.notifyChangesOfDoctagDocument(notifyRequest);
        
        // TODO: test validations
    }
    
    /**
     * Set the verification of the private public key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setVerificationOfKeyPairTest() throws ApiException {
        String publicKeyFingerprint = null;
        PublicKeyVerification publicKeyVerification = null;
        DiscoveryResponse response = 
        api.setVerificationOfKeyPair(publicKeyFingerprint, publicKeyVerification);
        
        // TODO: test validations
    }
    
    /**
     * Check authentication
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadWorkflowResultAndTriggerSignatureTest() throws ApiException {
        String documentId = null;
        String hostname = null;
        SignatureInputs signatureInputs = null;
        AuthInfoResponse response = 
        api.uploadWorkflowResultAndTriggerSignature(documentId, hostname, signatureInputs);
        
        // TODO: test validations
    }
    
    /**
     * Check that this instance actually owns the given private key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyInstanceHasPrivateKeyTest() throws ApiException {
        String publicKeyFingerprint = null;
        String seed = null;
        DiscoveryResponse response = 
        api.verifyInstanceHasPrivateKey(publicKeyFingerprint, seed);
        
        // TODO: test validations
    }
    
    /**
     * Perform Instance discovery
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewFileTest() throws ApiException {
        String fileId = null;
        DiscoveryResponse response = 
        api.viewFile(fileId);
        
        // TODO: test validations
    }
    
}
